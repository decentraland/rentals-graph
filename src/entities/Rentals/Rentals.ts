// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AssetClaimed extends ethereum.Event {
  get params(): AssetClaimed__Params {
    return new AssetClaimed__Params(this);
  }
}

export class AssetClaimed__Params {
  _event: AssetClaimed;

  constructor(event: AssetClaimed) {
    this._event = event;
  }

  get _contractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class AssetNonceUpdated extends ethereum.Event {
  get params(): AssetNonceUpdated__Params {
    return new AssetNonceUpdated__Params(this);
  }
}

export class AssetNonceUpdated__Params {
  _event: AssetNonceUpdated;

  constructor(event: AssetNonceUpdated) {
    this._event = event;
  }

  get _from(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _to(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _contractAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _signer(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get _sender(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class ContractNonceUpdated extends ethereum.Event {
  get params(): ContractNonceUpdated__Params {
    return new ContractNonceUpdated__Params(this);
  }
}

export class ContractNonceUpdated__Params {
  _event: ContractNonceUpdated;

  constructor(event: ContractNonceUpdated) {
    this._event = event;
  }

  get _from(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _to(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class FeeCollectorUpdated extends ethereum.Event {
  get params(): FeeCollectorUpdated__Params {
    return new FeeCollectorUpdated__Params(this);
  }
}

export class FeeCollectorUpdated__Params {
  _event: FeeCollectorUpdated;

  constructor(event: FeeCollectorUpdated) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class FeeUpdated extends ethereum.Event {
  get params(): FeeUpdated__Params {
    return new FeeUpdated__Params(this);
  }
}

export class FeeUpdated__Params {
  _event: FeeUpdated;

  constructor(event: FeeUpdated) {
    this._event = event;
  }

  get _from(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _to(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class MetaTransactionExecuted extends ethereum.Event {
  get params(): MetaTransactionExecuted__Params {
    return new MetaTransactionExecuted__Params(this);
  }
}

export class MetaTransactionExecuted__Params {
  _event: MetaTransactionExecuted;

  constructor(event: MetaTransactionExecuted) {
    this._event = event;
  }

  get _userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _relayerAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _functionData(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class OperatorUpdated extends ethereum.Event {
  get params(): OperatorUpdated__Params {
    return new OperatorUpdated__Params(this);
  }
}

export class OperatorUpdated__Params {
  _event: OperatorUpdated;

  constructor(event: OperatorUpdated) {
    this._event = event;
  }

  get _contractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _sender(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RentalStarted extends ethereum.Event {
  get params(): RentalStarted__Params {
    return new RentalStarted__Params(this);
  }
}

export class RentalStarted__Params {
  _event: RentalStarted;

  constructor(event: RentalStarted) {
    this._event = event;
  }

  get _contractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _lessor(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _tenant(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get _operator(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get _rentalDays(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get _pricePerDay(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get _isExtension(): boolean {
    return this._event.parameters[7].value.toBoolean();
  }

  get _sender(): Address {
    return this._event.parameters[8].value.toAddress();
  }

  get _signature(): Bytes {
    return this._event.parameters[9].value.toBytes();
  }
}

export class SignerNonceUpdated extends ethereum.Event {
  get params(): SignerNonceUpdated__Params {
    return new SignerNonceUpdated__Params(this);
  }
}

export class SignerNonceUpdated__Params {
  _event: SignerNonceUpdated;

  constructor(event: SignerNonceUpdated) {
    this._event = event;
  }

  get _from(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _to(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _signer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _sender(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class TokenUpdated extends ethereum.Event {
  get params(): TokenUpdated__Params {
    return new TokenUpdated__Params(this);
  }
}

export class TokenUpdated__Params {
  _event: TokenUpdated;

  constructor(event: TokenUpdated) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Rentals extends ethereum.SmartContract {
  static bind(address: Address): Rentals {
    return new Rentals("Rentals", address);
  }

  assetNonce(param0: Address, param1: BigInt, param2: Address): BigInt {
    let result = super.call(
      "assetNonce",
      "assetNonce(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );

    return result[0].toBigInt();
  }

  try_assetNonce(
    param0: Address,
    param1: BigInt,
    param2: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "assetNonce",
      "assetNonce(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contractNonce(): BigInt {
    let result = super.call("contractNonce", "contractNonce():(uint256)", []);

    return result[0].toBigInt();
  }

  try_contractNonce(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contractNonce",
      "contractNonce():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fee(): BigInt {
    let result = super.call("fee", "fee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fee", "fee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeCollector(): Address {
    let result = super.call("feeCollector", "feeCollector():(address)", []);

    return result[0].toAddress();
  }

  try_feeCollector(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeCollector", "feeCollector():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isRented(_contractAddress: Address, _tokenId: BigInt): boolean {
    let result = super.call("isRented", "isRented(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_contractAddress),
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_isRented(
    _contractAddress: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("isRented", "isRented(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_contractAddress),
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lessors(param0: Address, param1: BigInt): Address {
    let result = super.call("lessors", "lessors(address,uint256):(address)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toAddress();
  }

  try_lessors(param0: Address, param1: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "lessors",
      "lessors(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    _operator: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(_operator),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    _operator: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(_operator),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rentals(param0: Address, param1: BigInt): BigInt {
    let result = super.call("rentals", "rentals(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toBigInt();
  }

  try_rentals(param0: Address, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rentals",
      "rentals(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  signerNonce(param0: Address): BigInt {
    let result = super.call("signerNonce", "signerNonce(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_signerNonce(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "signerNonce",
      "signerNonce(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tenants(param0: Address, param1: BigInt): Address {
    let result = super.call("tenants", "tenants(address,uint256):(address)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toAddress();
  }

  try_tenants(param0: Address, param1: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tenants",
      "tenants(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AcceptListingCall extends ethereum.Call {
  get inputs(): AcceptListingCall__Inputs {
    return new AcceptListingCall__Inputs(this);
  }

  get outputs(): AcceptListingCall__Outputs {
    return new AcceptListingCall__Outputs(this);
  }
}

export class AcceptListingCall__Inputs {
  _call: AcceptListingCall;

  constructor(call: AcceptListingCall) {
    this._call = call;
  }

  get _listing(): AcceptListingCall_listingStruct {
    return changetype<AcceptListingCall_listingStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get _operator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _index(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _rentalDays(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _fingerprint(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class AcceptListingCall__Outputs {
  _call: AcceptListingCall;

  constructor(call: AcceptListingCall) {
    this._call = call;
  }
}

export class AcceptListingCall_listingStruct extends ethereum.Tuple {
  get signer(): Address {
    return this[0].toAddress();
  }

  get contractAddress(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get expiration(): BigInt {
    return this[3].toBigInt();
  }

  get nonces(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get pricePerDay(): Array<BigInt> {
    return this[5].toBigIntArray();
  }

  get maxDays(): Array<BigInt> {
    return this[6].toBigIntArray();
  }

  get minDays(): Array<BigInt> {
    return this[7].toBigIntArray();
  }

  get signature(): Bytes {
    return this[8].toBytes();
  }
}

export class AcceptOfferCall extends ethereum.Call {
  get inputs(): AcceptOfferCall__Inputs {
    return new AcceptOfferCall__Inputs(this);
  }

  get outputs(): AcceptOfferCall__Outputs {
    return new AcceptOfferCall__Outputs(this);
  }
}

export class AcceptOfferCall__Inputs {
  _call: AcceptOfferCall;

  constructor(call: AcceptOfferCall) {
    this._call = call;
  }

  get _offer(): AcceptOfferCall_offerStruct {
    return changetype<AcceptOfferCall_offerStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class AcceptOfferCall__Outputs {
  _call: AcceptOfferCall;

  constructor(call: AcceptOfferCall) {
    this._call = call;
  }
}

export class AcceptOfferCall_offerStruct extends ethereum.Tuple {
  get signer(): Address {
    return this[0].toAddress();
  }

  get contractAddress(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get expiration(): BigInt {
    return this[3].toBigInt();
  }

  get nonces(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get pricePerDay(): BigInt {
    return this[5].toBigInt();
  }

  get rentalDays(): BigInt {
    return this[6].toBigInt();
  }

  get operator(): Address {
    return this[7].toAddress();
  }

  get fingerprint(): Bytes {
    return this[8].toBytes();
  }

  get signature(): Bytes {
    return this[9].toBytes();
  }
}

export class BumpAssetNonceCall extends ethereum.Call {
  get inputs(): BumpAssetNonceCall__Inputs {
    return new BumpAssetNonceCall__Inputs(this);
  }

  get outputs(): BumpAssetNonceCall__Outputs {
    return new BumpAssetNonceCall__Outputs(this);
  }
}

export class BumpAssetNonceCall__Inputs {
  _call: BumpAssetNonceCall;

  constructor(call: BumpAssetNonceCall) {
    this._call = call;
  }

  get _contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BumpAssetNonceCall__Outputs {
  _call: BumpAssetNonceCall;

  constructor(call: BumpAssetNonceCall) {
    this._call = call;
  }
}

export class BumpContractNonceCall extends ethereum.Call {
  get inputs(): BumpContractNonceCall__Inputs {
    return new BumpContractNonceCall__Inputs(this);
  }

  get outputs(): BumpContractNonceCall__Outputs {
    return new BumpContractNonceCall__Outputs(this);
  }
}

export class BumpContractNonceCall__Inputs {
  _call: BumpContractNonceCall;

  constructor(call: BumpContractNonceCall) {
    this._call = call;
  }
}

export class BumpContractNonceCall__Outputs {
  _call: BumpContractNonceCall;

  constructor(call: BumpContractNonceCall) {
    this._call = call;
  }
}

export class BumpSignerNonceCall extends ethereum.Call {
  get inputs(): BumpSignerNonceCall__Inputs {
    return new BumpSignerNonceCall__Inputs(this);
  }

  get outputs(): BumpSignerNonceCall__Outputs {
    return new BumpSignerNonceCall__Outputs(this);
  }
}

export class BumpSignerNonceCall__Inputs {
  _call: BumpSignerNonceCall;

  constructor(call: BumpSignerNonceCall) {
    this._call = call;
  }
}

export class BumpSignerNonceCall__Outputs {
  _call: BumpSignerNonceCall;

  constructor(call: BumpSignerNonceCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get _contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ExecuteMetaTransactionCall extends ethereum.Call {
  get inputs(): ExecuteMetaTransactionCall__Inputs {
    return new ExecuteMetaTransactionCall__Inputs(this);
  }

  get outputs(): ExecuteMetaTransactionCall__Outputs {
    return new ExecuteMetaTransactionCall__Outputs(this);
  }
}

export class ExecuteMetaTransactionCall__Inputs {
  _call: ExecuteMetaTransactionCall;

  constructor(call: ExecuteMetaTransactionCall) {
    this._call = call;
  }

  get _userAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _functionData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _signature(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ExecuteMetaTransactionCall__Outputs {
  _call: ExecuteMetaTransactionCall;

  constructor(call: ExecuteMetaTransactionCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _feeCollector(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _fee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetFeeCall extends ethereum.Call {
  get inputs(): SetFeeCall__Inputs {
    return new SetFeeCall__Inputs(this);
  }

  get outputs(): SetFeeCall__Outputs {
    return new SetFeeCall__Outputs(this);
  }
}

export class SetFeeCall__Inputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }

  get _fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFeeCall__Outputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }
}

export class SetFeeCollectorCall extends ethereum.Call {
  get inputs(): SetFeeCollectorCall__Inputs {
    return new SetFeeCollectorCall__Inputs(this);
  }

  get outputs(): SetFeeCollectorCall__Outputs {
    return new SetFeeCollectorCall__Outputs(this);
  }
}

export class SetFeeCollectorCall__Inputs {
  _call: SetFeeCollectorCall;

  constructor(call: SetFeeCollectorCall) {
    this._call = call;
  }

  get _feeCollector(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeCollectorCall__Outputs {
  _call: SetFeeCollectorCall;

  constructor(call: SetFeeCollectorCall) {
    this._call = call;
  }
}

export class SetOperatorCall extends ethereum.Call {
  get inputs(): SetOperatorCall__Inputs {
    return new SetOperatorCall__Inputs(this);
  }

  get outputs(): SetOperatorCall__Outputs {
    return new SetOperatorCall__Outputs(this);
  }
}

export class SetOperatorCall__Inputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }

  get _contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _operator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetOperatorCall__Outputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }
}

export class SetTokenCall extends ethereum.Call {
  get inputs(): SetTokenCall__Inputs {
    return new SetTokenCall__Inputs(this);
  }

  get outputs(): SetTokenCall__Outputs {
    return new SetTokenCall__Outputs(this);
  }
}

export class SetTokenCall__Inputs {
  _call: SetTokenCall;

  constructor(call: SetTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTokenCall__Outputs {
  _call: SetTokenCall;

  constructor(call: SetTokenCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
