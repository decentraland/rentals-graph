// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Rental extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Rental entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Rental must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Rental", id.toString(), this);
    }
  }

  static load(id: string): Rental | null {
    return changetype<Rental | null>(store.get("Rental", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractAddress(): string {
    let value = this.get("contractAddress");
    return value!.toString();
  }

  set contractAddress(value: string) {
    this.set("contractAddress", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get lessor(): string {
    let value = this.get("lessor");
    return value!.toString();
  }

  set lessor(value: string) {
    this.set("lessor", Value.fromString(value));
  }

  get tenant(): string {
    let value = this.get("tenant");
    return value!.toString();
  }

  set tenant(value: string) {
    this.set("tenant", Value.fromString(value));
  }

  get operator(): string {
    let value = this.get("operator");
    return value!.toString();
  }

  set operator(value: string) {
    this.set("operator", Value.fromString(value));
  }

  get rentalDays(): BigInt {
    let value = this.get("rentalDays");
    return value!.toBigInt();
  }

  set rentalDays(value: BigInt) {
    this.set("rentalDays", Value.fromBigInt(value));
  }

  get startedAt(): BigInt {
    let value = this.get("startedAt");
    return value!.toBigInt();
  }

  set startedAt(value: BigInt) {
    this.set("startedAt", Value.fromBigInt(value));
  }

  get endsAt(): BigInt {
    let value = this.get("endsAt");
    return value!.toBigInt();
  }

  set endsAt(value: BigInt) {
    this.set("endsAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    return value!.toBigInt();
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get pricePerDay(): BigInt {
    let value = this.get("pricePerDay");
    return value!.toBigInt();
  }

  set pricePerDay(value: BigInt) {
    this.set("pricePerDay", Value.fromBigInt(value));
  }

  get sender(): string {
    let value = this.get("sender");
    return value!.toString();
  }

  set sender(value: string) {
    this.set("sender", Value.fromString(value));
  }

  get ownerHasClaimedAsset(): boolean {
    let value = this.get("ownerHasClaimedAsset");
    return value!.toBoolean();
  }

  set ownerHasClaimedAsset(value: boolean) {
    this.set("ownerHasClaimedAsset", Value.fromBoolean(value));
  }

  get isExtension(): boolean {
    let value = this.get("isExtension");
    return value!.toBoolean();
  }

  set isExtension(value: boolean) {
    this.set("isExtension", Value.fromBoolean(value));
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    return value!.toBoolean();
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get signature(): string {
    let value = this.get("signature");
    return value!.toString();
  }

  set signature(value: string) {
    this.set("signature", Value.fromString(value));
  }

  get rentalContractAddress(): string {
    let value = this.get("rentalContractAddress");
    return value!.toString();
  }

  set rentalContractAddress(value: string) {
    this.set("rentalContractAddress", Value.fromString(value));
  }
}

export class Count extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Count entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Count must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Count", id.toString(), this);
    }
  }

  static load(id: string): Count | null {
    return changetype<Count | null>(store.get("Count", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class NoncesUpdateHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NoncesUpdateHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NoncesUpdateHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NoncesUpdateHistory", id.toString(), this);
    }
  }

  static load(id: string): NoncesUpdateHistory | null {
    return changetype<NoncesUpdateHistory | null>(
      store.get("NoncesUpdateHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    return value!.toBigInt();
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get sender(): string {
    let value = this.get("sender");
    return value!.toString();
  }

  set sender(value: string) {
    this.set("sender", Value.fromString(value));
  }

  get contractUpdate(): string | null {
    let value = this.get("contractUpdate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contractUpdate(value: string | null) {
    if (!value) {
      this.unset("contractUpdate");
    } else {
      this.set("contractUpdate", Value.fromString(<string>value));
    }
  }

  get singerUpdate(): string | null {
    let value = this.get("singerUpdate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set singerUpdate(value: string | null) {
    if (!value) {
      this.unset("singerUpdate");
    } else {
      this.set("singerUpdate", Value.fromString(<string>value));
    }
  }

  get assetUpdate(): string | null {
    let value = this.get("assetUpdate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set assetUpdate(value: string | null) {
    if (!value) {
      this.unset("assetUpdate");
    } else {
      this.set("assetUpdate", Value.fromString(<string>value));
    }
  }
}

export class NoncesUpdateContractHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save NoncesUpdateContractHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NoncesUpdateContractHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NoncesUpdateContractHistory", id.toString(), this);
    }
  }

  static load(id: string): NoncesUpdateContractHistory | null {
    return changetype<NoncesUpdateContractHistory | null>(
      store.get("NoncesUpdateContractHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get newNonce(): BigInt {
    let value = this.get("newNonce");
    return value!.toBigInt();
  }

  set newNonce(value: BigInt) {
    this.set("newNonce", Value.fromBigInt(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    return value!.toBytes();
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }
}

export class NoncesUpdateSignerHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save NoncesUpdateSignerHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NoncesUpdateSignerHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NoncesUpdateSignerHistory", id.toString(), this);
    }
  }

  static load(id: string): NoncesUpdateSignerHistory | null {
    return changetype<NoncesUpdateSignerHistory | null>(
      store.get("NoncesUpdateSignerHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get newNonce(): BigInt {
    let value = this.get("newNonce");
    return value!.toBigInt();
  }

  set newNonce(value: BigInt) {
    this.set("newNonce", Value.fromBigInt(value));
  }

  get signer(): string {
    let value = this.get("signer");
    return value!.toString();
  }

  set signer(value: string) {
    this.set("signer", Value.fromString(value));
  }
}

export class NoncesUpdateAssetHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save NoncesUpdateAssetHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NoncesUpdateAssetHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NoncesUpdateAssetHistory", id.toString(), this);
    }
  }

  static load(id: string): NoncesUpdateAssetHistory | null {
    return changetype<NoncesUpdateAssetHistory | null>(
      store.get("NoncesUpdateAssetHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get newNonce(): BigInt {
    let value = this.get("newNonce");
    return value!.toBigInt();
  }

  set newNonce(value: BigInt) {
    this.set("newNonce", Value.fromBigInt(value));
  }

  get signer(): string {
    let value = this.get("signer");
    return value!.toString();
  }

  set signer(value: string) {
    this.set("signer", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get contractAddress(): string {
    let value = this.get("contractAddress");
    return value!.toString();
  }

  set contractAddress(value: string) {
    this.set("contractAddress", Value.fromString(value));
  }
}
