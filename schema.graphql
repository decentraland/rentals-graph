type Rental @entity {
  id: ID!
  contractAddress: String!
  tokenId: BigInt!
  lessor: String!
  tenant: String!
  operator: String!
  rentalDays: BigInt!
  startedAt: BigInt!
  endsAt: BigInt!
  updatedAt: BigInt!
  pricePerDay: BigInt!
  sender: String!
  ownerHasClaimedAsset: Boolean!
  isExtension: Boolean!
  isActive: Boolean!
  signature: String!
  rentalContractAddress: String!
}

# thegraph doesn't support count operations, but we need them to paginate results
# This entity is a workaround to this issue, but it's still not enough, as we'd need counts for more complex queries
type Count @entity {
  id: ID!
  value: BigInt!
}

enum NonceUpdateType @entity {
  CONTRACT
  SIGNER
  ASSET
}

type NoncesUpdateHistory @entity {
  id: ID!
  type: NonceUpdateType!
  date: BigInt!
  sender: String!
  contractUpdate: NoncesUpdateContractHistory
  singerUpdate: NoncesUpdateSignerHistory
  assetUpdate: NoncesUpdateAssetHistory
}

type NoncesUpdateContractHistory @entity {
  id: ID!
  newNonce: BigInt!
  signer: String!
}

type NoncesUpdateSignerHistory @entity {
  id: ID!
  newNonce: BigInt!
  signer: String!
}

type NoncesUpdateAssetHistory @entity {
  id: ID!
  newNonce: BigInt!
  signer: String!
  tokenId: BigInt!
  contractAddress: String!
}
