type Rental @entity {
  id: ID!
  contractAddress: String!
  tokenId: BigInt!
  lessor: String!
  tenant: String!
  operator: String!
  rentalDays: BigInt!
  startedAt: BigInt!
  endsAt: BigInt!
  updatedAt: BigInt!
  pricePerDay: BigInt!
  sender: String!
  ownerHasClaimedAsset: Boolean!
  isExtension: Boolean!
  isActive: Boolean!
  signature: String!
  rentalContractAddress: String!
}

# thegraph doesn't support count operations, but we need them to paginate results
# This entity is a workaround to this issue, but it's still not enough, as we'd need counts for more complex queries
type Count @entity {
  id: ID!
  value: BigInt!
}

enum IndexUpdateType @entity {
  CONTRACT
  SIGNER
  ASSET
}

enum IndexUpdateEventType {
  RENT
  CANCEL
}

type IndexesUpdateHistory @entity {
  id: ID!
  type: IndexUpdateType!
  date: BigInt!
  sender: String!
  contractUpdate: IndexesUpdateContractHistory
  singerUpdate: IndexesUpdateSignerHistory
  assetUpdate: IndexesUpdateAssetHistory
}

type IndexesUpdateContractHistory @entity {
  id: ID!
  newIndex: BigInt!
  contractAddress: Bytes!
}

type IndexesUpdateSignerHistory @entity {
  id: ID!
  newIndex: BigInt!
  signer: String!
}

type IndexesUpdateAssetHistory @entity {
  id: ID!
  newIndex: BigInt!
  signer: String!
  tokenId: BigInt!
  contractAddress: String!
  type: IndexUpdateEventType!
}

# This entity is used to track nft contracts being used for rentals.
# This is used so no Rentable.create(contractAddress) is called more than once for the same contract.
# The UpdateOperator event is emitted by these contracts (At least LAND and Estates).
# So we need to handle these events from these contract for indexing purposes.
type Rentable @entity {
  id: ID!
}

# Assets that have been transferred in and out of the rentals contract.
type RentalAsset @entity {
  id: ID!
  contractAddress: Bytes!
  tokenId: BigInt!
  # The address acting as lessor of the asset, will be null if the asset was claimed back.
  lessor: Bytes
  # Determines if the asset has been transferred out of the rentals contract through a claim.
  isClaimed: Boolean!
}
